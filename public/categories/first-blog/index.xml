
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>first blog on Rat&#39;s blog</title>
   <link>https://www.rye-catcher.codes/categories/first-blog/</link>
   <description>Recent content in first blog on Rat&#39;s blog</description>
   <generator>Hugo -- gohugo.io</generator>
   <copyright>Copyright &amp;copy; 2020 - Rat</copyright>
   <lastBuildDate>Fri, 14 Aug 2020 18:03:05 +0800</lastBuildDate>
   
       <atom:link href="https://www.rye-catcher.codes/categories/first-blog/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Euclid Algorithm a Beautiful Way to Compute Gcd</title>
       <link>https://www.rye-catcher.codes/posts/euclid-algorithm-a-beautiful-way-to-compute-gcd/</link>
       <pubDate>Wed, 19 Aug 2020 17:03:29 +0800</pubDate>
       
       <guid>https://www.rye-catcher.codes/posts/euclid-algorithm-a-beautiful-way-to-compute-gcd/</guid>
       <description>&lt;h2 id=&#34;euclids-algorithm-a-beautiful-way-to-compute-the-greatest-common-divisor&#34;&gt;Euclid&#39;s algorithm: a beautiful way to compute the greatest common divisor&lt;/h2&gt;

&lt;h3 id=&#34;preface&#34;&gt;Preface&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The greatest common divisor (GCD) of the two integers $a$ and $b$ is defined to be the largest integer that divides both $a$ and $b$ with no reminder.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Euclid&#39;s algorithm is a beautiful and efficient way to compute the GCD(a,b)&lt;/p&gt;

&lt;h3 id=&#34;algorithm&#34;&gt;Algorithm&lt;/h3&gt;

&lt;p&gt;It is simple in the mathematical form:
&lt;span  class=&#34;math&#34;&gt;\(
GCD(a,b) = GCD(b, a \bmod b)
\)&lt;/span&gt;
when $b = 0$ in one recursive process , $a$ is the GCD we want.&lt;/p&gt;

&lt;p&gt;For example, $GCD(40, 24) = GCD(24, 40 \bmod 24) = GCD(24, 16) = GCD(16, 8) = GCD(8, 0) = 8$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gcd&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gcd&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;proofs&#34;&gt;Proofs&lt;/h3&gt;

&lt;p&gt;This article will introduce two ways to prove the validity of this algorithm&lt;/p&gt;

&lt;h4 id=&#34;section-1&#34;&gt;#1&lt;/h4&gt;

&lt;p&gt;First we will prove that $GCD(a, b) = GCD(a-b, b)$, assuming that $a&amp;gt;b$&lt;/p&gt;

&lt;p&gt;Suppose $GCD(a, b) = p$, so that we can write $a = k_1 p, b = k_2p$, and $GCD(k_1, k_2) = 1$, that is to say, there is no common divisor in $k_1$ and $k_2$ since $p$ is already the &lt;strong&gt;greatest&lt;/strong&gt; common divisor.&lt;/p&gt;

&lt;p&gt;To prove $GCD(k_1p, k_2p) = GCD((k_1-k_2)p, k_2p)$, we must prove that $GCD(k_1-k_2, k_2) = 1$.&lt;/p&gt;

&lt;p&gt;Assume there is a common divisor $x$, such that $k_1 - k_2 = mx, k_2 = nx$. Then we can deduce that  $k_1 = mx+k_2 = (m+n)x$, so $GCD(k_1, k_2) = x$, which is contradictory to the fact that $GCD(k_1, k_2) = 1$&lt;/p&gt;

&lt;p&gt;Hence we can prove that $GCD(k_1p, k_2p) = GCD((k_1-k_2)p, k_2p)$, in other words, $GCD(a, b) = GCD(a-b, b)$&lt;/p&gt;

&lt;p&gt;So we can also say
&lt;span  class=&#34;math&#34;&gt;\(
GCD(a, b) = GCD(a-b, b) = GCD(a-2b, b) = GCD(a-3b, b) = ... GCD(a - \lfloor{\frac{a}{b}}\rfloor b, b) = GCD(a \bmod b, b)
\)&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&#34;section-2&#34;&gt;#2&lt;/h4&gt;

&lt;p&gt;Assume $a = bk + c$ , so $c = a \bmod b$, and $c = a-bk$&lt;/p&gt;

&lt;p&gt;Given any $d$ such that $d | a, d|b$, we can have $\frac{c}{d} = \frac{a}{d} - k\frac{b}{d}$, since right hand side is a integer, left hand side must be an integer&lt;/p&gt;

&lt;p&gt;So every common divisor of two integers $a$ and $b$  is also the divisor of $a \bmod b$. Therefore,
&lt;span  class=&#34;math&#34;&gt;\(
\forall d , d|a \land d|b \ \Rightarrow \ d|b \land d|(a \bmod b)
\)&lt;/span&gt;
Next we can use the similar method to prove the common divisor of $b$ and $a \bmod b$ is also the common divisor of $a$ and $b$ (Hint: given any $d$ such that $d|b$, $d|(a \bmod b)$)&lt;/p&gt;

&lt;p&gt;So the set of common divisors of $a,b$ is the same with the one of $b, a \bmod b$. So the greatest common divisor is the same as well&lt;/p&gt;

&lt;h3 id=&#34;remark&#34;&gt;Remark&lt;/h3&gt;

&lt;p&gt;There is a extended Euclid algorithms to find the solution of certain equations&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Logarithmic Algorithms to Calculate Fibonacci Numbers From SICP JS Exercise 1.19 </title>
       <link>https://www.rye-catcher.codes/posts/logarithmic-algorithms-to-calculate-fibonacci-numbers-from-sicp-js-exercise-1-19/</link>
       <pubDate>Wed, 19 Aug 2020 00:31:21 +0800</pubDate>
       
       <guid>https://www.rye-catcher.codes/posts/logarithmic-algorithms-to-calculate-fibonacci-numbers-from-sicp-js-exercise-1-19/</guid>
       <description>&lt;h2 id=&#34;logarithmic-algorithms-to-calculate-fibonacci-numbers--from-sicpjs-exercise-119&#34;&gt;Logarithmic algorithms to calculate Fibonacci numbers - from SICP-JS Exercise 1.19&lt;/h2&gt;

&lt;h3 id=&#34;preface&#34;&gt;Preface&lt;/h3&gt;

&lt;p&gt;We all know the Fibonacci sequence&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{equation}
Fib(k)= 
\begin{cases}
0 &amp; &amp; (k == 0) \\
1 &amp; &amp; (k == 1) \\
Fib(k-1) + Fib(k-2) &amp; &amp; (k &gt;= 2) 
\end{cases}
\end{equation}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;and the Fibonacci number $F_n$ denotes the nth term of this sequence&lt;/p&gt;

&lt;p&gt;By the definition we can easily write a recursive function to compute $F_n$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_fib&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	       &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	       &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	         &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	         &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_fib&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_fib&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;calc_fib&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;//output: 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But this takes time complexity of $O(n)$, that is to the number of steps to calculate basically grows linearly&lt;/p&gt;

&lt;p&gt;Here the article will introduce two ways to computer $F_n$ in $O(\log n)$. The first methods comes from the exercise 1.19 in the book &lt;a href=&#34;https://source-academy.github.io/sicp/index.html&#34;&gt;Structure and Interpretation of Computer Programs â€” JavaScript Adaptation&lt;/a&gt;, which is the textbook used in CS1101S module of NUS. Before you read this, I suggest know how to compute $n^k$ in $O(\log k)$&lt;/p&gt;

&lt;h3 id=&#34;method-1&#34;&gt;Method #1&lt;/h3&gt;

&lt;p&gt;This is a constructive way to me. We define a way of transform a pair of numbers $(a, b)$, this transformation needs two parameters, we name $p, q$ here.&lt;/p&gt;

&lt;p&gt;We define that, a pair of numbers $(a,b)$, after the transformation $T(p, q)$, becomes $(a(p + q) + bq, bp + aq)$.&lt;/p&gt;

&lt;p&gt;You may ask: &amp;quot;wait, what, how the * this is related to Fib&amp;quot;, pls keep reading&lt;/p&gt;

&lt;p&gt;Let $p =0, q = 1$, and you will surprisingly find that $(F_{n}, F_{n-1})$  after the transformation $T(p,q)$ becomes $(F_{n+1}, F_n)$&lt;/p&gt;

&lt;p&gt;OK, now at least we know this &lt;em&gt;is&lt;/em&gt; related to Fibonacci numbers. In fact after doing $n-1$ times $T(p, q)$ you can obtain &lt;span  class=&#34;math&#34;&gt;\((F_n, F_{n-1})\)&lt;/span&gt; from pair $(F_1, F_0)$. BUT, its still $O(n)$.&lt;/p&gt;

&lt;p&gt;Now, a lazy but clever person comes up with a good idea so that he could do less work, what if I change the parameter $p, q$ to something else $p&#39;, q&#39;$ so that the effect of $T(p&#39;, q&#39;)$ is the same as using two times of $T(p, q)$ ? That is to say $T^2(p, q) = T(p&#39;, q&#39;)$&lt;/p&gt;

&lt;p&gt;You can use your algebra knowledge to obtain that $p&#39; = p^2 + q^2, q&#39; = 2pq + q^2$.  So if you do $n$ times transformation $T(p, q)$ (suppose $n$ is even), it is equal to do $\frac{n}{2}$ times $T(p&#39;, q&#39;)$ . Or we could say: $T^n(p, q) = T^{\frac{n}{2}}(p&#39;, q&#39;)$&lt;/p&gt;

&lt;p&gt;Now recall how we do the logarithmic algorithms for exponentiation, we can have following programs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_fib&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 
	       &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_even&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;)
	         &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_fib&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;, 
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;, 
                        &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
	         &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_fib&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;, 
                        &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;), 
                        &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;, 
                        &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	       &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To compute $F_n$, the time complexity is $O(\log n)$&lt;/p&gt;

&lt;h3 id=&#34;method-2&#34;&gt;Method #2&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;WARNING: You better know the matrix manipulation before reading this section&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the method we define such transformation $T(p, q)$. But it is an abstract function, right? Here we are going to give a &lt;strong&gt;REAL&lt;/strong&gt; transformation by matrix manipulation.&lt;/p&gt;

&lt;div&gt;
$$
\left[
\begin{matrix}
F_n &amp; F_{n-1} \\
F_{n-1} &amp; F_{n-2}
\end{matrix}
\right]
\cdot
\left[
\begin{matrix}
1 &amp; 1 \\
1 &amp; 0
\end{matrix}
\right]
= 
\left[
\begin{matrix}
F_{n+1} &amp; F_{n} \\
F_{n} &amp; F_{n-1}
\end{matrix}
\right]
$$
&lt;/div&gt;

&lt;p&gt;So we do $n$  times manipulation and will get $F_{n+1}$&lt;/p&gt;

&lt;p&gt;But...remember matrix manipulation has the property of associativity? e.g. $A \cdot B \cdot C = A \cdot (B \cdot C)$, $A, B, C$ all denoted a matrix.&lt;/p&gt;

&lt;p&gt;So let $B$ denotes&lt;/p&gt;

&lt;div&gt;
$$
\left[
\begin{matrix}
1 &amp; 1 \\
1 &amp; 0
\end{matrix}
\right]
$$

$n$ times transformation is :

$$
\left[
\begin{matrix}
F_n &amp; F_{n-1} \\
F_{n-1} &amp; F_{n-2}
\end{matrix}
\right]
\cdot
B ^ n
= 
\left[
\begin{matrix}
F_{n+1} &amp; F_{n} \\
F_{n} &amp; F_{n-1}
\end{matrix}
\right]
$$
&lt;/div&gt;

&lt;p&gt;And, in fact we can apply the logarithmic algorithm to matrix exponentiation. So the time complexity becomes $O(\log n)$. Since I haven&#39;t got a good way to implement matrix and matrix manipulation in &lt;em&gt;source&lt;/em&gt; language, I will not give the code here.&lt;/p&gt;

&lt;h3 id=&#34;remark&#34;&gt;Remark&lt;/h3&gt;

&lt;p&gt;In fact we can find a instance for the transformation in &lt;strong&gt;Method #1&lt;/strong&gt;, in matrix form.&lt;/p&gt;

&lt;div&gt;
$$
\left[
\begin{matrix}
0 &amp; 0 \\
b &amp; a 
\end{matrix}
\right]
\cdot
\left[
\begin{matrix}
p &amp; q \\
q &amp; (p+q) 
\end{matrix}
\right]
$$
&lt;/div&gt;

&lt;p&gt;notice that&lt;/p&gt;

&lt;div&gt;
$$
\left[
\begin{matrix}
p &amp; q \\
q &amp; (p+q) 
\end{matrix}
\right]
\cdot
\left[
\begin{matrix}
p &amp; q \\
q &amp; (p+q) 
\end{matrix}
\right]
= 
\left[
\begin{matrix}
p^2 + q^2 &amp; 2pq +q^2 \\
2pq +q^2 &amp; p^2 + 2pq+2q^2
\end{matrix}
\right]
=
\left[
\begin{matrix}
p&#39; &amp; q&#39; \\
q&#39; &amp; (p&#39;+q&#39;) 
\end{matrix}
\right]
$$
&lt;/div&gt;

&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://source-academy.github.io/sicp/index.html&#34;&gt;Interpretation of Computer Programs â€” JavaScript Adaptation&lt;/a&gt;, 1.2.4, Exercise 1.19&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>My First Post</title>
       <link>https://www.rye-catcher.codes/posts/my-first-post/</link>
       <pubDate>Fri, 14 Aug 2020 18:03:05 +0800</pubDate>
       
       <guid>https://www.rye-catcher.codes/posts/my-first-post/</guid>
       <description>&lt;h3 id=&#34;hello-world&#34;&gt;Hello World&lt;/h3&gt;
&lt;p&gt;This is the first post on this blog.&lt;/p&gt;
&lt;p&gt;Free to say anything in the comments&lt;/p&gt;
</description>
     </item>
   
 </channel>
</rss>
